
The fractional knapsack problem is a variation of the 0/1 knapsack problem. In the fractional knapsack problem, you are allowed to break items into smaller pieces, allowing you to take fractions of an item, rather than having to take it whole or not at all. The problem is solved using a greedy approach where items are sorted based on their value-to-weight ratio, and the highest ratio is chosen first.

Fractional Knapsack Problem Solution using Greedy Method
Python Implementation
python
Copy code
import time

# Function to solve the fractional knapsack problem
def fractional_knapsack(items, capacity):
    # Sort items by value-to-weight ratio in descending order
    items.sort(key=lambda x: x[1] / x[2], reverse=True)
    
    total_value = 0.0
    for item in items:
        name, value, weight = item
        if capacity - weight >= 0:
            capacity -= weight
            total_value += value
        else:
            fraction = capacity / weight
            total_value += value * fraction
            break

    return total_value

# Example usage
items = [("Item 1", 60, 10), ("Item 2", 100, 20), ("Item 3", 120, 30)]
capacity = 50

start_time = time.time()
max_value = fractional_knapsack(items, capacity)
end_time = time.time()

print(f"Maximum value we can obtain: {max_value}")
print(f"Execution Time: {end_time - start_time:.6f} seconds")
C++ Implementation
cpp
Copy code
#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
using namespace std;

// Structure for an item
struct Item {
    string name;
    double value, weight;

    // Constructor for item
    Item(string name_, double value_, double weight_) : name(name_), value(value_), weight(weight_) {}
};

// Comparison function to sort items by value-to-weight ratio
bool cmp(Item a, Item b) {
    double r1 = a.value / a.weight;
    double r2 = b.value / b.weight;
    return r1 > r2;
}

// Function to solve the fractional knapsack problem
double fractionalKnapsack(vector<Item>& items, double capacity) {
    // Sort items by value-to-weight ratio
    sort(items.begin(), items.end(), cmp);

    double total_value = 0.0;

    for (auto& item : items) {
        if (capacity >= item.weight) {
            capacity -= item.weight;
            total_value += item.value;
        } else {
            total_value += item.value * (capacity / item.weight);
            break;
        }
    }

    return total_value;
}

int main() {
    vector<Item> items = {
        {"Item 1", 60, 10},
        {"Item 2", 100, 20},
        {"Item 3", 120, 30}
    };
    double capacity = 50.0;

    auto start = chrono::high_resolution_clock::now();
    double max_value = fractionalKnapsack(items, capacity);
    auto end = chrono::high_resolution_clock::now();

    chrono::duration<double> execution_time = end - start;

    cout << "Maximum value we can obtain: " << max_value << endl;
    cout << "Execution Time: " << execution_time.count() << " seconds" << endl;

    return 0;
}
Execution Time Explanation
Both implementations calculate the time taken to solve the fractional knapsack problem using a greedy method. Here's a breakdown:

Python:

Execution time is calculated using the time.time() method, which measures the time difference before and after solving the problem.
C++:

Execution time is calculated using the <chrono> library, measuring the duration between the start and end times using chrono::high_resolution_clock.
Time Complexity:

1. Sorting the Items:
Sorting the items based on the value-to-weight ratio takes O(nlogn), where n is the number of items.

2. Iterating Over the Items:
After sorting, iterating over the items and calculating the value takes O(n).

Thus, the overall time complexity is O(nlogn).





Space Complexity:

1. Space for Sorting:
Sorting requires O(n) extra space for storing and processing the list or array of items.

2. Additional Variables:
The algorithm only uses a few extra variables (total_value, capacity, etc.), which is constant space, i.e., O(1).

Thus, the overall space complexity is O(n) due to the space used for sorting.